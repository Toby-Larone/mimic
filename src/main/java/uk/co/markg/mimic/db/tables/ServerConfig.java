/*
 * This file is generated by jOOQ.
 */
package uk.co.markg.mimic.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import uk.co.markg.mimic.db.DefaultSchema;
import uk.co.markg.mimic.db.Keys;
import uk.co.markg.mimic.db.tables.records.ServerConfigRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServerConfig extends TableImpl<ServerConfigRecord> {

    private static final long serialVersionUID = 1710254107;

    /**
     * The reference instance of <code>server_config</code>
     */
    public static final ServerConfig SERVER_CONFIG = new ServerConfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServerConfigRecord> getRecordType() {
        return ServerConfigRecord.class;
    }

    /**
     * The column <code>server_config.serverid</code>.
     */
    public final TableField<ServerConfigRecord, Long> SERVERID = createField(DSL.name("serverid"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>server_config.opt_in_role</code>.
     */
    public final TableField<ServerConfigRecord, String> OPT_IN_ROLE = createField(DSL.name("opt_in_role"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>server_config</code> table reference
     */
    public ServerConfig() {
        this(DSL.name("server_config"), null);
    }

    /**
     * Create an aliased <code>server_config</code> table reference
     */
    public ServerConfig(String alias) {
        this(DSL.name(alias), SERVER_CONFIG);
    }

    /**
     * Create an aliased <code>server_config</code> table reference
     */
    public ServerConfig(Name alias) {
        this(alias, SERVER_CONFIG);
    }

    private ServerConfig(Name alias, Table<ServerConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServerConfig(Name alias, Table<ServerConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ServerConfig(Table<O> child, ForeignKey<O, ServerConfigRecord> key) {
        super(child, key, SERVER_CONFIG);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ServerConfigRecord> getPrimaryKey() {
        return Keys.SERVER_CONFIG_PKEY;
    }

    @Override
    public List<UniqueKey<ServerConfigRecord>> getKeys() {
        return Arrays.<UniqueKey<ServerConfigRecord>>asList(Keys.SERVER_CONFIG_PKEY);
    }

    @Override
    public ServerConfig as(String alias) {
        return new ServerConfig(DSL.name(alias), this);
    }

    @Override
    public ServerConfig as(Name alias) {
        return new ServerConfig(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerConfig rename(String name) {
        return new ServerConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerConfig rename(Name name) {
        return new ServerConfig(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
