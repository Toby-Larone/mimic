package uk.co.markg.mimic.database;

import static uk.co.markg.mimic.db.tables.Usage.USAGE;
import java.time.LocalDateTime;
import org.jooq.DSLContext;
import disparse.parser.reflection.Injectable;
import net.dv8tion.jda.api.events.message.MessageReceivedEvent;
import uk.co.markg.mimic.db.tables.pojos.Usage;

/**
 * A {@link org.jooq.DSLContext DSLContext} implementation to access the
 * {@link uk.co.markg.mimic.db.tables.Usage Usage} table generated by JOOQ.
 */
public class UsageRepository {
  private DSLContext dsl;

  /**
   * {@link disparse.parser.reflection.Injectable Injectable} method used by disparse upon command
   * invocation.
   * 
   * @return a new usage respository instance
   */
  @Injectable
  public static UsageRepository getRepository() {
    return new UsageRepository();
  }

  private UsageRepository() {
    dsl = JooqConnection.getJooqContext();
  }

  /**
   * Creates a new {@link uk.co.markg.mimic.db.tables.pojos.Usage Usage} record for every invocation
   * of the mimic command. Each usage record contains the type of command invoked, the serverid, and
   * the date and time of the {@link net.dv8tion.jda.api.events.message.MessageReceivedEvent
   * MessageReceivedEvent}.
   * 
   * @param clazz                The type of the command executed
   * @param MessageReceivedEvent The {@link net.dv8tion.jda.api.events.message.MessageReceivedEvent
   *                             MessageReceivedEvent} instance of the command
   * @return The number of inserted records
   */
  public int save(Class<?> clazz, MessageReceivedEvent event) {
    Usage usage = new Usage();
    usage.setCommand(clazz.getSimpleName());
    usage.setServerid(event.getGuild().getIdLong());
    usage.setUsagetime(LocalDateTime.now());
    return save(usage);
  }

  /**
   * Inserts the {@link uk.co.markg.mimic.db.tables.pojos.Usage Usage} instance into the database.
   * 
   * @param usage The instance to be added to the database
   * @return The number of inserted records
   */
  private int save(Usage usage) {
    return dsl.executeInsert(dsl.newRecord(USAGE, usage));
  }

  /**
   * Deletes the command usage records.
   * 
   * @param serverid The target server
   * @return The number of deleted records
   */
  public int deleteByServerId(long serverid) {
    return dsl.deleteFrom(USAGE).where(USAGE.SERVERID.eq(serverid)).execute();
  }
}
